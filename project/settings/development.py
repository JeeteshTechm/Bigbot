"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 3.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "secretkeygoeshere"

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
DEBUG = True

ALLOWED_HOSTS = ["*"]

# AUTH_USER_MODEL = 'core.User'
CORS_ALLOW_ALL_ORIGINS = True
CORS_EXPOSE_HEADERS = ["access-token"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_middleware_global_request",
    "channels",
    "corsheaders",
    "django_extensions",
    "core",
    "storages",
    "django_prometheus",
]

GRAPH_MODELS = {
    "all_applications": True,
    "group_models": True,
}

MIDDLEWARE = [
    "django_prometheus.middleware.PrometheusBeforeMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "contrib.middleware.KeycloakUserMiddleware",
    "django_middleware_global_request.middleware.GlobalRequestMiddleware",
    "django_prometheus.middleware.PrometheusAfterMiddleware",
]

PROMETHEUS_EXPORT_MIGRATIONS = False
ROOT_URLCONF = "project.urls"
ASGI_APPLICATION = "project.routing.application"


TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASE_HOST = os.getenv("DATABASE_HOST", "127.0.0.1")

DATABASES = {
    "default": {
        "ENGINE": "django_prometheus.db.backends.postgresql",
        "NAME": os.getenv("DATABASE_NAME"),
        "USER": os.getenv("DATABASE_USER"),
        "PASSWORD": os.getenv("DATABASE_PASSWORD"),
        "HOST": DATABASE_HOST,
        "PORT": "5432",
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

# STATIC_URL = '/static/'

# STATICFILES_DIRS = [
#    os.path.join(BASE_DIR,'static'),
# ]

# STATIC_URL = "https://storage.googleapis.com/" + str(os.getenv("BUCKET_NAME")) + "/static/"
# STATIC_URL = '/static/'
# STATIC_ROOT = os.path.join(BASE_DIR, "public")
# STATIC_ROOT = os.path.join(BASE_DIR, 'static')


STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

HTTP_PROTOCOL = "https"

PROJECT_DIR = os.path.dirname(os.path.abspath(__file__))
DEFAULT_PASS = "yB0xI3eU7vV3uI2a"

IS_PRODUCTION = False if os.getenv("IS_DEVELOPMENT") else True

if not IS_PRODUCTION:
    DEBUG = True
    HTTP_PROTOCOL = "http"
    STATIC_URL = "/static/"
    DATABASES = {
        "default": {
            "ENGINE": "django_prometheus.db.backends.sqlite3",
            "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
        }
    }

CLOUD = str(os.getenv("CLOUD"))

if CLOUD == "gcp":
    STATIC_URL = "https://storage.googleapis.com/" + str(os.getenv("BUCKET_NAME")) + "/static/"
    STATIC_ROOT = os.path.join(BASE_DIR, "public")
elif CLOUD == "aws":
    AWS_ACCESS_KEY_ID = str(os.getenv("AWS_ACCESS_KEY_ID"))
    AWS_SECRET_ACCESS_KEY = str(os.getenv("AWS_SECRET_ACCESS_KEY"))
    AWS_STORAGE_BUCKET_NAME = str(os.getenv("BUCKET_NAME"))
    AWS_S3_CUSTOM_DOMAIN = "%s.s3.amazonaws.com" % AWS_STORAGE_BUCKET_NAME
    AWS_S3_OBJECT_PARAMETERS = {
        "CacheControl": "max-age=86400",
    }
    AWS_LOCATION = "static"
    STATICFILES_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
    STATIC_URL = "https://%s/%s/" % (AWS_S3_CUSTOM_DOMAIN, AWS_LOCATION)
    DEFAULT_FILE_STORAGE = "project.storage_backends.MediaStorage"
    # STATIC_URL = "https://" + str(os.getenv("BUCKET_NAME")) + ".amazonaws.com/static/"
else:
    print("The AKS cluster is not deployed yet")
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, "static")

KEYCLOAK_CONFIG = {
    "KEYCLOAK_SERVER_URL": os.getenv("KEYCLOAK_SERVER_URL"),
    "KEYCLOAK_REALM": os.getenv("KEYCLOAK_REALM"),
    "KEYCLOAK_CLIENT_ID": os.getenv("KEYCLOAK_CLIENT_ID"),
    "KEYCLOAK_CLIENT_SECRET_KEY": os.getenv("KEYCLOAK_CLIENT_SECRET_KEY"),
    "KEYCLOAK_ADMIN_USERNAME": os.getenv("KEYCLOAK_ADMIN_USERNAME"),
    "KEYCLOAK_ADMIN_PASSWORD": os.getenv("KEYCLOAK_ADMIN_PASSWORD"),
}


MASTER_REALM = {
    "KEYCLOAK_SERVER_URL": os.getenv("KEYCLOAK_SERVER_URL"),
    "KEYCLOAK_REALM": os.getenv("KEYCLOAK_MASTER_REALM"),
    "KEYCLOAK_CLIENT_ID": os.getenv("KEYCLOAK_MASTER_CLIENT_ID"),
    "KEYCLOAK_ADMIN_USERNAME": os.getenv("KEYCLOAK_MASTER_USERNAME"),
    "KEYCLOAK_ADMIN_PASSWORD": os.getenv("KEYCLOAK_MASTER_PASSWORD"),
    "KEYCLOAK_EMAIL_SERVER_PASSWORD": os.getenv("KEYCLOAK_EMAIL_SERVER_PASSWORD", ""),
    "KEYCLOAK_REGULAR_CLIENT_ID": os.getenv("KEYCLOAK_REGULAR_CLIENT_ID"),
    "KEYCLOAK_REGULAR_CLIENT_SECRET": os.getenv("KEYCLOAK_REGULAR_CLIENT_SECRET"),
}


# --------------------------------------------------------------------------------------------------
# Gitlab Settings
# --------------------------------------------------------------------------------------------------


GITLAB = {
    "ACCESS_TOKEN": os.getenv("GITLAB_TOKEN"),
    "CREATE_PIPELINE_ID": os.getenv("GITLAB_CREATE_PIPELINE_ID"),
    "DELETE_PIPELINE_ID": os.getenv("GITLAB_DELETE_PIPELINE_ID"),
    "REF_BRANCH": os.getenv("GITLAB_REF_BRANCH"),
}
